def jumper(l1,i,temp1,l2):
    if i == len(l1) - 1:
        if ((len(l2) == 0) or (len(temp1) < len(l2))):
            l2.clear()
            for k in temp1:
                l2.append(k)
    elif i< len(l1):
        for x in range(1,l1[i]+1):
            temp1.append(i+x)
            jumper(l1,i+x,temp1,l2)
            temp1.pop()

def min_jumper(l1,i,n,l_memo):
    if i == (n-1):
        l_memo[i] = 0
        return 0
    elif i < (n-1):
        min_len=-1
        for j in range(1,l1[i]+1):
            if (i+j) <=(n-1) and (l1[i+j] != 0):
                if (i+j) in l_memo.keys():
                    local_len = 1 + l_memo[i+j]
                else:
                    local_len = 1 + min_jumper(l1,i+j,n,l_memo)
                if (min_len == -1) or (local_len < min_len):
                    min_len = local_len
        l_memo[i] = min_len
        return min_len

def min_jumper_iter(l1):
    l_memo={}
    n=len(l1)
    l_memo[n - 1] = 0

    for i in range(n-2,-1,-1):
        min_len = -1
        for j in range(1,l1[i]+1):
            if (i+j) <= (n-1) and (l_memo[i+j] != -1):
                local_len = 1 + l_memo[i+j]
                if (min_len == -1) or (min_len > local_len):
                    min_len = local_len
        l_memo[i] = min_len
    print(l_memo[0])

l1=[1,3,5,8,9,2,6,7,6,8,9]
min_jumper_iter(l1)
