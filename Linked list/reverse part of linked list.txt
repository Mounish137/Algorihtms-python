class Node:
    def __init__(self):
        self.data = None
        self.next = None

class Linked:
    def __init__(self):
        self.root = None

    def insert1(self,val):
        if self.root != None:
            self.insert2(self.root,val)
        else:
            self.root = Node()
            self.root.data  = val

    def insert2(self,noder,val):
        temp=noder
        while(temp.next != None):
            temp=temp.next
        temp2=Node()
        temp2.data = val
        temp.next = temp2

    def display(self):
        if self.root != None:
            self.display2(self.root)
        else:
            print("root empty")

    def display2(self,noder):
        temp=noder
        while(temp != None):
            print(temp.data,end=" ")
            temp=temp.next

    def reverse_part(self,st,end):
        temp1 = self.root
        count=0
        while(temp1 != None and count < st):
            temp1=temp1.next
            count=count + 1
        temp2=temp1
        while(temp2 != None and count < end):
            count=count + 1
            temp2=temp2.next
        prev = temp2
        next = None
        current = temp1.next
        while(current != temp2):
            next = current.next
            current.next = prev
            prev = current
            current = next
        temp1.next = prev

a=Linked()
for i in range(12):
    a.insert1(i)
a.display()
print()
a.reverse_part(4,8)
a.display()
